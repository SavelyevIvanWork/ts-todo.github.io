{"version":3,"sources":["types/user.ts","types/todo.ts","store/action/user.ts","store/action/todo.ts","types/filter.ts","store/action/filter.ts","store/action/index.ts","hooks/useAction.ts","hooks/useTypedSelector.ts","components/Todo.tsx","components/Loader.tsx","components/TodoList.tsx","components/TodoForm.tsx","components/Filter.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/todoReducer.ts","store/reducers/index.ts","store/reducers/filterReducer.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","TodoActionTypes","fetchUsers","dispatch","a","type","FETCH_USERS","axios","get","response","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","FilterActionTypes","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","setTodoPage","SET_TODO_PAGE","addTodo","todo","ADD_TODO","removeTodo","id","REMOVE_TODO","completedTodo","COMPLETED_TODO","editTodo","title","EDIT_TODO","sortAllTodos","SORT_ALL","sortCurrentTodos","SORT_CURRENT","sortCompletedTodos","SORT_COMPLETED","UserActions","TodoActions","FilterActions","useActions","useDispatch","bindActionCreators","Actions","useTypedSelector","useSelector","useStyles","makeStyles","completed","textDecoration","todoItem","textAlign","edit","width","padding","Todo","classes","useState","isOpen","value","editInput","setEditInput","ListItem","Grid","container","justifyContent","alignItems","className","style","border","Checkbox","checked","onChange","Typography","clsx","align","onDoubleClick","TextField","variant","autoFocus","e","target","onKeyUp","key","Button","onClick","color","margin","Loader","height","version","xmlns","xmlnsXlink","x","y","viewBox","xmlSpace","fill","d","attributeName","attributeType","dur","from","to","repeatCount","TodoList","state","error","loading","todos","sort","filter","useEffect","filterTodo","useMemo","getVisibleTodos","item","xs","List","map","form","formInput","TodoForm","inputForm","setInputForm","placeholder","preventDefault","test","uuidv4","Filter","containerApp","paddingTop","paddingBottom","appTitle","fontSize","marginBottom","App","Container","length","initialState","users","rootReducer","combineReducers","user","action","console","log","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.707742a3.chunk.js","sourcesContent":["export interface UserState {\n    users: any[]\n    loading: boolean\n    error: null | string\n}\n\n\nexport enum UserActionTypes {\n    FETCH_USERS = \"FETCH_USERS\",\n    FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\",\n    FETCH_USERS_ERROR = \"FETCH_USERS_ERROR\",\n}\n\ninterface FetchUsersAction {\n    type: UserActionTypes.FETCH_USERS\n}\n\ninterface FetchUsersSuccessAction {\n    type: UserActionTypes.FETCH_USERS_SUCCESS\n    payload: any[]\n}\n\ninterface FetchUsersErrorAction {\n    type: UserActionTypes.FETCH_USERS_ERROR\n    payload: string\n}\n\nexport type UserAction = FetchUsersAction | FetchUsersSuccessAction | FetchUsersErrorAction","export interface TodoState {\n    todos: TodoType[]\n    loading: boolean\n    error: null | string\n    page: number\n    limit: number\n}\n\nexport type TodoType = {\n    id: string,\n    title: string,\n    completed: boolean\n}\n\nexport enum TodoActionTypes {\n    FETCH_TODOS = 'FETCH_TODOS',\n    FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\n    FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\n    SET_TODO_PAGE = 'SET_TODO_PAGE',\n    ADD_TODO = 'ADD_TODO',\n    REMOVE_TODO = 'REMOVE_TODO',\n    COMPLETED_TODO = 'COMPLETED_TODO',\n    EDIT_TODO = 'EDIT_TODO'\n}\n\ninterface FetchTodosAction {\n    type: TodoActionTypes.FETCH_TODOS\n}\ninterface FetchTodosSuccessAction {\n    type: TodoActionTypes.FETCH_TODOS_SUCCESS\n    payload: any[]\n}\ninterface FetchTodosErrorAction {\n    type: TodoActionTypes.FETCH_TODOS_ERROR\n    payload: string\n}\ninterface FetchSetTodoAction {\n    type: TodoActionTypes.SET_TODO_PAGE\n    payload: number\n}\n\ninterface AddTodoAction {\n    type: TodoActionTypes.ADD_TODO\n    payload: TodoType\n}\n\ninterface RemoveTodoAction {\n    type: TodoActionTypes.REMOVE_TODO\n    payload: string\n}\ninterface CompletedTodoAction {\n    type: TodoActionTypes.COMPLETED_TODO\n    payload: string\n}\n\ninterface EditTodoAction {\n    type: TodoActionTypes.EDIT_TODO\n    payload: {id: string, title: string}\n}\n\nexport type TodoAction = FetchTodosAction | FetchTodosSuccessAction | FetchTodosErrorAction\n    | FetchSetTodoAction | AddTodoAction | RemoveTodoAction | CompletedTodoAction | EditTodoAction\n","import {UserAction, UserActionTypes} from \"../../types/user\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\n\nexport const fetchUsers = () => async (dispatch: Dispatch<UserAction>) => {\n    try {\n        dispatch({type: UserActionTypes.FETCH_USERS})\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n        dispatch({type: UserActionTypes.FETCH_USERS_SUCCESS, payload: response.data})\n    }\n    catch (e) {\n        dispatch({type: UserActionTypes.FETCH_USERS_ERROR, payload: 'Произошла ошибка, при загрузке пользователей!'})\n    }\n}","import {Dispatch} from \"redux\";\nimport axios from \"axios\";\nimport {TodoType, TodoAction, TodoActionTypes} from \"../../types/todo\";\n\nexport const fetchTodos = (page = 1, limit = 10) => async (dispatch: Dispatch<TodoAction>) => {\n    try {\n        dispatch({type: TodoActionTypes.FETCH_TODOS})\n        const response = await axios.get('https://jsonplaceholder.typicode.com/todos',{\n            params: {_page: page, _limit: limit}\n        })\n        dispatch({type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: response.data})\n    }\n    catch (e) {\n        dispatch({type: TodoActionTypes.FETCH_TODOS_ERROR, payload: 'Произошла ошибка, при загрузке todo!'})\n    }\n}\n\nexport const setTodoPage = (page: number): TodoAction => {\n    return {type: TodoActionTypes.SET_TODO_PAGE, payload: page}\n}\n\nexport const addTodo = (todo: TodoType): TodoAction => {\n    return {type: TodoActionTypes.ADD_TODO, payload: todo}\n}\n\nexport const removeTodo = (id: TodoType[\"id\"]): TodoAction => {\n    return {type: TodoActionTypes.REMOVE_TODO, payload: id}\n}\n\nexport const completedTodo = (id: TodoType[\"id\"]): TodoAction => {\n    return {type: TodoActionTypes.COMPLETED_TODO, payload: id}\n}\nexport const editTodo = (id: TodoType[\"id\"], title: TodoType[\"title\"]): TodoAction => {\n    return {type: TodoActionTypes.EDIT_TODO, payload: {id, title}}\n}","export type FilterState = string\n\nexport enum FilterActionTypes {\n    SORT_ALL = 'SORT_ALL',\n    SORT_CURRENT = 'SORT_CURRENT',\n    SORT_COMPLETED = 'SORT_COMPLETED',\n}\n\ninterface FilterSortAllAction {\n    type: FilterActionTypes.SORT_ALL\n}\ninterface FilterSortCurrentAction {\n    type: FilterActionTypes.SORT_CURRENT\n}\ninterface FilterSortCompletedAction {\n    type: FilterActionTypes.SORT_COMPLETED\n}\n\nexport type FilterAction = FilterSortAllAction | FilterSortCurrentAction | FilterSortCompletedAction","import {FilterAction, FilterActionTypes} from \"../../types/filter\";\n\nexport const sortAllTodos = (): FilterAction => {\n    return {type: FilterActionTypes.SORT_ALL}\n}\nexport const sortCurrentTodos = (): FilterAction => {\n    return {type: FilterActionTypes.SORT_CURRENT}\n}\nexport const sortCompletedTodos = (): FilterAction => {\n    return {type: FilterActionTypes.SORT_COMPLETED}\n}","import * as UserActions from './user'\nimport * as TodoActions from './todo'\nimport * as FilterActions from \"./filter\"\n\nexport default {\n    ...UserActions,\n    ...TodoActions,\n    ...FilterActions\n}","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport Actions from \"./../store/action\"\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(Actions, dispatch)\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store/reducers\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import {Button, Checkbox, FormControl, Grid, ListItem, TextField, Typography} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport {useActions} from \"../hooks/useAction\";\nimport clsx from 'clsx';\nimport makeStyles from \"@material-ui/styles/makeStyles\";\n\ntype Props = {\n    title: string,\n    completed: boolean,\n    id: string\n}\n\ntype EditInput = {\n    isOpen: boolean,\n    value: string\n}\n\nconst useStyles = makeStyles({\n    completed: {\n        textDecoration: 'line-through'\n    },\n    todoItem: {\n        textAlign: 'left'\n    },\n    edit: {\n        width: '100%',\n        '& div input': {\n            padding: '8px !important'\n        }\n    }\n});\n\nconst Todo = ({id, title, completed}: Props) => {\n    const {removeTodo, completedTodo, editTodo} = useActions()\n    const classes = useStyles()\n\n    const [editInput, setEditInput] = useState<EditInput>(\n        {\n            isOpen: false,\n            value: title\n        })\n\n    const onDeleteTodo = () => {\n        removeTodo(id)\n    }\n    const onCompletedTodo = () => {\n        completedTodo(id)\n    }\n    const onEditTodo = () => {\n        setEditInput({...editInput, isOpen: true})\n    }\n    const onChangeInputTodo = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEditInput({...editInput, value: e.target.value})\n    }\n    const oncl = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            editTodo(id, editInput.value)\n            setEditInput({...editInput, isOpen: false})\n        }\n    }\n    return (\n        <ListItem>\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\" className={\"MuiGrid-wrap-xs-nowrap\"}\n                  style={{border: '1px solid #1976d2'}}>\n                <Checkbox\n                    checked={completed}\n                    onChange={onCompletedTodo}\n                />\n                <div style={{width: '100%'}}>\n                    <Typography\n                        className={clsx(completed && classes.completed)}\n                        align='left'\n                        style={{width: '100%'}}\n                        onDoubleClick={onEditTodo}\n                    >\n                        {!editInput.isOpen && title}\n                    </Typography>\n                    {editInput.isOpen && <TextField\n                        id=\"outlined-basic\"\n                        variant=\"outlined\"\n                        value={editInput.value}\n                        autoFocus\n                        onChange={onChangeInputTodo}\n                        onKeyUp={oncl}\n                        className={classes.edit}\n                    />}\n                </div>\n                <Button\n                    onClick={onDeleteTodo}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{margin: '9px'}}\n                >\n                    X\n                </Button>\n            </Grid>\n        </ListItem>\n    )\n}\n\nexport default Todo","const Loader = () => {\n    return (<div style={{width: '150px', height: '150px'}}>\n            <svg version=\"1.1\" id=\"L7\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                 x=\"0px\"\n                 y=\"0px\"\n                 viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xmlSpace=\"preserve\">\n                <path fill=\"#fc8403\" d=\"M31.6,3.5C5.9,13.6-6.6,42.7,3.5,68.4c10.1,25.7,39.2,38.3,64.9,28.1l-3.1-7.9c-21.3,8.4-45.4-2-53.8-23.3\n  c-8.4-21.3,2-45.4,23.3-53.8L31.6,3.5z\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        attributeType=\"XML\"\n                        type=\"rotate\"\n                        dur=\"2s\"\n                        from=\"0 50 50\"\n                        to=\"360 50 50\"\n                        repeatCount=\"indefinite\"/>\n                </path>\n                <path fill=\"#fc1403\" d=\"M42.3,39.6c5.7-4.3,13.9-3.1,18.1,2.7c4.3,5.7,3.1,13.9-2.7,18.1l4.1,5.5c8.8-6.5,10.6-19,4.1-27.7\n  c-6.5-8.8-19-10.6-27.7-4.1L42.3,39.6z\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        attributeType=\"XML\"\n                        type=\"rotate\"\n                        dur=\"1s\"\n                        from=\"0 50 50\"\n                        to=\"-360 50 50\"\n                        repeatCount=\"indefinite\"/>\n                </path>\n                <path fill=\"#5a03fc\" d=\"M82,35.7C74.1,18,53.4,10.1,35.7,18S10.1,46.6,18,64.3l7.6-3.4c-6-13.5,0-29.3,13.5-35.3s29.3,0,35.3,13.5\n  L82,35.7z\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        attributeType=\"XML\"\n                        type=\"rotate\"\n                        dur=\"2s\"\n                        from=\"0 50 50\"\n                        to=\"360 50 50\"\n                        repeatCount=\"indefinite\"/>\n                </path>\n            </svg>\n    </div>\n\n    )\n}\n\nexport default Loader","import React, {useEffect, useMemo} from \"react\";\nimport {useActions} from \"../hooks/useAction\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\n\nimport {List} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {FilterActionTypes} from \"../types/filter\";\nimport {TodoType} from \"../types/todo\";\nimport Todo from \"./Todo\";\nimport Loader from \"./Loader\";\n\nconst getVisibleTodos = (sort: FilterActionTypes, todos: TodoType[]) => {\n    switch (sort) {\n        case FilterActionTypes.SORT_ALL:\n            return todos\n        case FilterActionTypes.SORT_CURRENT:\n            return todos.filter(todo => !todo.completed)\n        case FilterActionTypes.SORT_COMPLETED:\n            return todos.filter(todo => todo.completed)\n        default:\n            return todos\n    }\n}\n\nconst TodoList: React.FC = () => {\n    const {page, error, loading, limit, todos} = useTypedSelector(state => state.todo)\n    const sort = useTypedSelector(state => state.filter)\n    const {fetchTodos, setTodoPage} = useActions()\n    const pages = [1, 2, 3, 4, 5]\n\n    useEffect(() => {\n        fetchTodos(page, limit)\n    }, [page])\n\n    const filterTodo = useMemo(() => getVisibleTodos(sort, todos), [sort, todos])\n\n    return (\n        <Grid container item justifyContent=\"center\" xs={12}>\n            {loading && <Loader />}\n            {error && <h1>{error}</h1>}\n\n            <List style={{width: '100%'}}>\n                {filterTodo.map(todo =>\n                    <Todo\n                        key={todo.id}\n                        id={todo.id}\n                        title={todo.title}\n                        completed={todo.completed}\n                    />\n                )}\n            </List>\n            {/*<div style={{display: 'flex'}}>*/}\n            {/*    {pages.map(item =>*/}\n            {/*        <div*/}\n            {/*            onClick={() => setTodoPage(item)}*/}\n            {/*            style={{border: item === page ? '2px solid green' : '1px solid gray', padding: 10, cursor: 'pointer'}}*/}\n            {/*        >*/}\n            {/*            {item}*/}\n            {/*        </div>)}*/}\n            {/*</div>*/}\n        </Grid>\n    )\n}\n\nexport default TodoList","import React, {useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/styles/makeStyles\";\nimport {useActions} from \"../hooks/useAction\";\nimport {v4 as uuidv4} from 'uuid';\n\nconst useStyles = makeStyles({\n    form: {\n        width: '100%',\n        padding: '16px'\n    },\n    formInput: {\n        width: '80%'\n    },\n});\n\nconst TodoForm: React.FC = () => {\n    const classes = useStyles()\n    const {addTodo} = useActions()\n\n    const [inputForm, setInputForm] = useState<string>('')\n\n    const validationInputForm = (value: string) => {\n        const reg = /^\\s*$/;\n        return !reg.test(value)\n    }\n\n    const changeInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputForm(e.target.value)\n    }\n\n    const clickAddButton = (e: React.MouseEvent) => {\n        e.preventDefault()\n        if (validationInputForm(inputForm)) {\n            addTodo({id: uuidv4(), title: inputForm, completed: false})\n            setInputForm('')\n        }\n    }\n\n    return (\n        <Grid container item justifyContent=\"center\" xs={12}>\n            <form className={classes.form}>\n                <Grid container justifyContent={\"space-between\"}>\n                    <TextField\n                        className={classes.formInput}\n                        id=\"standard-basic\"\n                        placeholder=\"Add your todo\"\n                        value={inputForm}\n                        onChange={changeInputHandler}\n                        autoFocus\n                    />\n                    <Button\n                        onClick={clickAddButton}\n                        variant=\"contained\"\n                        color=\"primary\">\n                        Add\n                    </Button>\n                </Grid>\n            </form>\n        </Grid>\n    )\n}\n\nexport default TodoForm","import {Button, Grid} from \"@material-ui/core\";\nimport React from \"react\";\nimport {useActions} from \"../hooks/useAction\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport clsx from \"clsx\";\nimport {FilterActionTypes} from \"../types/filter\"\n\n\nconst Filter = () => {\n    const sort = useTypedSelector(state => state.filter)\n    const {sortAllTodos, sortCurrentTodos, sortCompletedTodos} = useActions()\n\n    const onSortAllButton = () => {\n        sortAllTodos()\n    }\n    const onSortCompletedButton = () => {\n        sortCompletedTodos()\n    }\n    const onSortCurrentButton = () => {\n        sortCurrentTodos()\n    }\n    return (\n        <Grid container item justifyContent={\"space-between\"}>\n            <Button\n                onClick={onSortAllButton}\n                variant=\"outlined\"\n                color=\"primary\"\n                className={clsx(sort === FilterActionTypes.SORT_ALL && 'Mui-disabled')}\n            >\n                All\n            </Button>\n            <Button\n                onClick={onSortCurrentButton}\n                variant=\"outlined\"\n                color=\"primary\"\n                className={clsx(sort === FilterActionTypes.SORT_CURRENT && 'Mui-disabled')}\n            >\n                Current\n            </Button>\n            <Button\n                onClick={onSortCompletedButton}\n                variant=\"outlined\"\n                color=\"primary\"\n                className={clsx(sort === FilterActionTypes.SORT_COMPLETED && 'Mui-disabled')}\n            >\n                Completed\n            </Button>\n        </Grid>\n    )\n}\n\nexport default  Filter","import React from 'react';\n\nimport './App.css';\nimport UserList from \"./components/UserList\";\nimport TodoList from \"./components/TodoList\";\nimport Grid from '@material-ui/core/Grid';\nimport {Button, Container, TextField, Typography} from '@material-ui/core';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport TodoForm from \"./components/TodoForm\";\nimport Filter from \"./components/Filter\";\nimport {useTypedSelector} from \"./hooks/useTypedSelector\";\n\nconst useStyles = makeStyles({\n    containerApp: {\n        width: '700px',\n        paddingTop: '20px',\n        paddingBottom: '50px'\n    },\n    appTitle: {\n        fontSize: '60px',\n        color: '#3f51b5',\n        marginBottom: '30px'\n    }\n});\n\nfunction App() {\n    const classes = useStyles()\n    const {todos} = useTypedSelector(state => state.todo)\n\n    return (\n        <>\n            {/*<UserList/>*/}\n            <Container className={classes.containerApp}>\n                <Typography className={classes.appTitle} variant=\"h1\" align=\"center\">Todo List</Typography>\n                <Grid container item justifyContent=\"center\" xs={12}>\n                    <TodoForm/>\n                    <TodoList/>\n                    {todos.length > 0 && <Filter/>}\n                </Grid>\n\n            </Container>\n        </>\n    );\n}\n\nexport default App;\n","import {UserAction, UserActionTypes, UserState} from \"../../types/user\";\n\nconst initialState: UserState = {\n    users: [],\n    loading: false,\n    error: null\n}\n\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\n    switch (action.type) {\n        case UserActionTypes.FETCH_USERS:\n            return {\n                users: [],\n                loading: true,\n                error: null\n            }\n        case UserActionTypes.FETCH_USERS_SUCCESS:\n            return {\n                users: action.payload,\n                loading: false,\n                error: null\n            }\n        case UserActionTypes.FETCH_USERS_ERROR:\n            return {\n                users: [],\n                loading: false,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}","import {TodoAction, TodoActionTypes, TodoState} from \"../../types/todo\"\n\nconst initialState: TodoState = {\n    todos: [],\n    page: 1,\n    limit: 10,\n    error: null,\n    loading: false\n}\n\nexport const todoReducer = (state = initialState, action: TodoAction): TodoState => {\n    switch (action.type) {\n        case TodoActionTypes.FETCH_TODOS:\n            return {\n                ...state,\n                loading: true\n            }\n        case TodoActionTypes.FETCH_TODOS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                todos: action.payload\n            }\n        case TodoActionTypes.FETCH_TODOS_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        case TodoActionTypes.SET_TODO_PAGE:\n            return {\n                ...state,\n                page: action.payload\n            }\n        case TodoActionTypes.ADD_TODO:\n            return {\n                ...state,\n                todos: [...state.todos, action.payload]\n            }\n        case TodoActionTypes.REMOVE_TODO:\n            return {\n                ...state,\n                todos: state.todos.filter(todo => todo.id !== action.payload)\n            }\n        case TodoActionTypes.COMPLETED_TODO:\n            return {\n                ...state,\n                todos: state.todos.map(todo => {\n                    if (todo.id === action.payload) {\n                        todo.completed = !todo.completed\n                    }\n                    return todo\n                })\n            }\n        case TodoActionTypes.EDIT_TODO:\n            console.log(action.payload)\n            return {\n                ...state,\n                todos: state.todos.map(todo => {\n                    if (todo.id === action.payload.id) {\n                        todo.title = action.payload.title\n                    }\n                    return todo\n                })\n            }\n        default:\n            return state\n    }\n}","import { userReducer } from \"./userReducer\";\nimport { combineReducers } from \"redux\";\nimport { todoReducer } from \"./todoReducer\";\nimport { filterReducer } from \"./filterReducer\";\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    todo: todoReducer,\n    filter: filterReducer\n})\n\nexport type RootState = ReturnType<typeof  rootReducer>","import {FilterAction, FilterActionTypes, FilterState} from \"../../types/filter\";\n\nexport const filterReducer = (state = FilterActionTypes.SORT_ALL, action: FilterAction): FilterState => {\n    switch (action.type) {\n        case FilterActionTypes.SORT_ALL:\n            return FilterActionTypes.SORT_ALL\n        case FilterActionTypes.SORT_COMPLETED:\n            return FilterActionTypes.SORT_COMPLETED\n        case FilterActionTypes.SORT_CURRENT:\n            return FilterActionTypes.SORT_CURRENT\n        default:\n            return state\n    }\n}","import {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {rootReducer} from \"./reducers\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\"\nimport {store} from \"./store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}