{"version":3,"sources":["types/user.ts","types/todo.ts","store/action/user.ts","store/action/todo.ts","store/action/index.ts","hooks/useAction.ts","hooks/useTypedSelector.ts","components/Todo.tsx","components/TodoList.tsx","components/TodoForm.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/todoReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","TodoActionTypes","fetchUsers","dispatch","a","type","FETCH_USERS","axios","get","response","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","setTodoPage","SET_TODO_PAGE","addTodo","todo","ADD_TODO","removeTodo","id","REMOVE_TODO","completedTodo","COMPLETED_TODO","UserActions","TodoActions","useActions","useDispatch","bindActionCreators","Actions","useTypedSelector","useSelector","useStyles","makeStyles","completed","textDecoration","Todo","title","classes","ListItem","Grid","container","justifyContent","alignItems","className","Checkbox","value","inputProps","onChange","Typography","clsx","Button","onClick","variant","color","TodoList","state","error","loading","todos","useEffect","List","style","width","map","form","formInput","TodoForm","useState","inputForm","setInputForm","console","log","item","xs","TextField","placeholder","e","target","preventDefault","uuidv4","App","Container","align","initialState","users","rootReducer","combineReducers","user","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00fc3b48.chunk.js","sourcesContent":["export interface UserState {\n    users: any[]\n    loading: boolean\n    error: null | string\n}\n\n\nexport enum UserActionTypes {\n    FETCH_USERS = \"FETCH_USERS\",\n    FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\",\n    FETCH_USERS_ERROR = \"FETCH_USERS_ERROR\",\n}\n\ninterface FetchUsersAction {\n    type: UserActionTypes.FETCH_USERS\n}\n\ninterface FetchUsersSuccessAction {\n    type: UserActionTypes.FETCH_USERS_SUCCESS\n    payload: any[]\n}\n\ninterface FetchUsersErrorAction {\n    type: UserActionTypes.FETCH_USERS_ERROR\n    payload: string\n}\n\nexport type UserAction = FetchUsersAction | FetchUsersSuccessAction | FetchUsersErrorAction","export interface TodoState {\n    todos: Todo[]\n    loading: boolean\n    error: null | string\n    page: number\n    limit: number\n}\n\nexport type Todo = {\n    id: string,\n    title: string,\n    completed: boolean\n}\n\nexport enum TodoActionTypes {\n    FETCH_TODOS = 'FETCH_TODOS',\n    FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\n    FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\n    SET_TODO_PAGE = 'SET_TODO_PAGE',\n    ADD_TODO = 'ADD_TODO',\n    REMOVE_TODO = 'REMOVE_TODO',\n    COMPLETED_TODO = 'COMPLETED_TODO',\n}\n\ninterface FetchTodosAction {\n    type: TodoActionTypes.FETCH_TODOS\n}\ninterface FetchTodosSuccessAction {\n    type: TodoActionTypes.FETCH_TODOS_SUCCESS\n    payload: any[]\n}\ninterface FetchTodosErrorAction {\n    type: TodoActionTypes.FETCH_TODOS_ERROR\n    payload: string\n}\ninterface FetchSetTodoAction {\n    type: TodoActionTypes.SET_TODO_PAGE\n    payload: number\n}\n\ninterface AddTodoAction {\n    type: TodoActionTypes.ADD_TODO\n    payload: Todo\n}\n\ninterface RemoveTodoAction {\n    type: TodoActionTypes.REMOVE_TODO\n    payload: string\n}\ninterface CompletedTodoAction {\n    type: TodoActionTypes.COMPLETED_TODO\n    payload: string\n}\n\nexport type TodoAction = FetchTodosAction | FetchTodosSuccessAction | FetchTodosErrorAction | FetchSetTodoAction | AddTodoAction | RemoveTodoAction | CompletedTodoAction","import {UserAction, UserActionTypes} from \"../../types/user\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\n\nexport const fetchUsers = () => async (dispatch: Dispatch<UserAction>) => {\n    try {\n        dispatch({type: UserActionTypes.FETCH_USERS})\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n        dispatch({type: UserActionTypes.FETCH_USERS_SUCCESS, payload: response.data})\n    }\n    catch (e) {\n        dispatch({type: UserActionTypes.FETCH_USERS_ERROR, payload: 'Произошла ошибка, при загрузке пользователей!'})\n    }\n}","import {Dispatch} from \"redux\";\nimport axios from \"axios\";\nimport {Todo, TodoAction, TodoActionTypes} from \"../../types/todo\";\n\nexport const fetchTodos = (page = 1, limit = 10) => async (dispatch: Dispatch<TodoAction>) => {\n    try {\n        dispatch({type: TodoActionTypes.FETCH_TODOS})\n        const response = await axios.get('https://jsonplaceholder.typicode.com/todos',{\n            params: {_page: page, _limit: limit}\n        })\n        dispatch({type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: response.data})\n    }\n    catch (e) {\n        dispatch({type: TodoActionTypes.FETCH_TODOS_ERROR, payload: 'Произошла ошибка, при загрузке todo!'})\n    }\n}\n\nexport const setTodoPage = (page: number): TodoAction => {\n    return {type: TodoActionTypes.SET_TODO_PAGE, payload: page}\n}\n\nexport const addTodo = (todo: Todo): TodoAction => {\n    return {type: TodoActionTypes.ADD_TODO, payload: todo}\n}\n\nexport const removeTodo = (id: Todo[\"id\"]): TodoAction => {\n    return {type: TodoActionTypes.REMOVE_TODO, payload: id}\n}\n\nexport const completedTodo = (id: Todo[\"id\"]): TodoAction => {\n    return {type: TodoActionTypes.COMPLETED_TODO, payload: id}\n}","import * as UserActions from './user'\nimport * as TodoActions from './todo'\n\nexport default {\n    ...UserActions,\n    ...TodoActions\n}","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport Actions from \"./../store/action\"\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(Actions, dispatch)\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store/reducers\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import {Button, Checkbox, Grid, ListItem, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useActions } from \"../hooks/useAction\";\nimport clsx from 'clsx';\nimport makeStyles from \"@material-ui/styles/makeStyles\";\n\n\ntype Props = {\n    title: string,\n    completed: boolean,\n    id: string\n}\n\nconst useStyles = makeStyles({\n    completed: {\n        textDecoration: 'line-through'\n    }\n});\n\nconst Todo = ({id, title, completed}: Props) => {\n    const {removeTodo, completedTodo} = useActions()\n    const classes = useStyles()\n\n    const onDeleteTodo = () => {\n        removeTodo(id)\n    }\n    const onCompletedTodo = () => {\n        completedTodo(id)\n    }\n\n    return (\n        <ListItem>\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\" className={\"MuiGrid-wrap-xs-nowrap\"}>\n                <Checkbox\n                    value=\"checkedA\"\n                    inputProps={{ 'aria-label': 'Checkbox A' }}\n                    onChange={onCompletedTodo}\n                />\n                <Typography className={clsx(completed && classes.completed)}>{title}</Typography>\n                <Button\n                    onClick={onDeleteTodo}\n                    variant=\"contained\"\n                    color=\"secondary\">\n                    X\n                </Button>\n            </Grid>\n        </ListItem>\n    )\n}\n\nexport default Todo","import React, {useEffect} from \"react\";\nimport {useActions} from \"../hooks/useAction\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport Todo from \"./Todo\";\nimport {List} from \"@material-ui/core\";\n\nconst TodoList: React.FC = () => {\n    const {page, error, loading, limit, todos} = useTypedSelector(state => state.todo)\n    const {fetchTodos, setTodoPage} = useActions()\n    const pages = [1, 2, 3, 4, 5]\n\n    useEffect(() => {\n        fetchTodos(page, limit)\n    }, [page])\n    return (\n        <>\n            {loading && <h1>Идёт загрузка...</h1>}\n            {error && <h1>{error}</h1>}\n\n            <List style={{width: '50%'}}>\n                {todos.map(todo =>\n                    <Todo\n                        key={todo.id}\n                        id={todo.id}\n                        title={todo.title}\n                        completed={todo.completed}\n                    />\n                )}\n            </List>\n            {/*<div style={{display: 'flex'}}>*/}\n            {/*    {pages.map(item =>*/}\n            {/*        <div*/}\n            {/*            onClick={() => setTodoPage(item)}*/}\n            {/*            style={{border: item === page ? '2px solid green' : '1px solid gray', padding: 10, cursor: 'pointer'}}*/}\n            {/*        >*/}\n            {/*            {item}*/}\n            {/*        </div>)}*/}\n            {/*</div>*/}\n        </>\n    )\n}\n\nexport default TodoList","import React, {ReactEventHandler, SyntheticEvent, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/styles/makeStyles\";\nimport {useActions} from \"../hooks/useAction\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst useStyles = makeStyles({\n    form: {\n        width: '50%'\n    },\n    formInput: {\n        width: '80%'\n    },\n});\n\nconst TodoForm: React.FC = () => {\n    const classes = useStyles()\n    const {addTodo} = useActions()\n\n    const [inputForm, setInputForm] = useState<string>('')\n\n    const changeInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputForm(e.target.value)\n    }\n\n    const clickAddButton = (e: React.MouseEvent) => {\n        e.preventDefault()\n        addTodo({id: uuidv4(), title: inputForm, completed: false})\n        setInputForm('')\n    }\n    console.log(inputForm)\n\n    return (\n        <Grid container item justifyContent=\"center\" xs={12}>\n            <form className={classes.form}>\n                <Grid container justifyContent={\"space-between\"}>\n                    <TextField\n                        className={classes.formInput}\n                        id=\"standard-basic\"\n                        placeholder=\"Add your todo\"\n                        value={inputForm}\n                        onChange={changeInputHandler}\n                    />\n                    <Button\n                        onClick={clickAddButton}\n                        variant=\"contained\"\n                        color=\"primary\">\n                        Add\n                    </Button>\n                </Grid>\n            </form>\n        </Grid>\n    )\n}\n\nexport default TodoForm","import React from 'react';\n\nimport './App.css';\nimport UserList from \"./components/UserList\";\nimport TodoList from \"./components/TodoList\";\nimport Grid from '@material-ui/core/Grid';\nimport {Button, Container, TextField, Typography} from '@material-ui/core';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport TodoForm from \"./components/TodoForm\";\n\nconst useStyles = makeStyles({\n});\n\nfunction App() {\n\n    return (\n        <>\n            {/*<UserList/>*/}\n            <Container>\n                <Typography variant=\"h1\" align=\"center\">Todo List</Typography>\n                <Grid container item justifyContent=\"center\" xs={12}>\n                    <TodoForm />\n                    <Grid container item justifyContent=\"center\" xs={12}>\n                        <TodoList/>\n                    </Grid>\n                </Grid>\n\n            </Container>\n        </>\n    );\n}\n\nexport default App;\n","import {UserAction, UserActionTypes, UserState} from \"../../types/user\";\n\nconst initialState: UserState = {\n    users: [],\n    loading: false,\n    error: null\n}\n\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\n    switch (action.type) {\n        case UserActionTypes.FETCH_USERS:\n            return {\n                users: [],\n                loading: true,\n                error: null\n            }\n        case UserActionTypes.FETCH_USERS_SUCCESS:\n            return {\n                users: action.payload,\n                loading: false,\n                error: null\n            }\n        case UserActionTypes.FETCH_USERS_ERROR:\n            return {\n                users: [],\n                loading: false,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}","import {TodoAction, TodoActionTypes, TodoState} from \"../../types/todo\"\n\nconst initialState: TodoState = {\n    todos: [],\n    page: 1,\n    limit: 10,\n    error: null,\n    loading: false\n}\n\nexport const todoReducer = (state = initialState, action: TodoAction): TodoState => {\n    switch (action.type) {\n        case TodoActionTypes.FETCH_TODOS:\n            return {\n                ...state,\n                loading: true\n            }\n        case TodoActionTypes.FETCH_TODOS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                todos: action.payload\n            }\n        case TodoActionTypes.FETCH_TODOS_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        case TodoActionTypes.SET_TODO_PAGE:\n            return {\n                ...state,\n                page: action.payload\n            }\n        case TodoActionTypes.ADD_TODO:\n            return {\n                ...state,\n                todos: [...state.todos, action.payload]\n            }\n        case TodoActionTypes.REMOVE_TODO:\n            return {\n                ...state,\n                todos: state.todos.filter(todo => todo.id !== action.payload)\n            }\n        case TodoActionTypes.COMPLETED_TODO:\n            return {\n                ...state,\n                todos: state.todos.map(todo => {\n                    if (todo.id === action.payload) {\n                        todo.completed = !todo.completed\n                    }\n                    return todo\n                })\n            }\n        default:\n            return state\n    }\n}","import { userReducer } from \"./userReducer\";\nimport { combineReducers } from \"redux\";\nimport { todoReducer } from \"./todoReducer\";\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    todo: todoReducer\n})\n\nexport type RootState = ReturnType<typeof  rootReducer>","import {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {rootReducer} from \"./reducers\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\"\nimport {store} from \"./store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}